//公共库自己不要设置env变量, 由引用库来设置, 否则会覆盖evn变量
// 引用库只需要依赖配置
// println ext.has('env')
if(ext.has('env') && ext.env == 'dev'){
    dependencies {
        // other project
        compile project(':jkutil')
        compile project(':jkguard')

        // jphp
        compile 'org.develnext.jphp:jphp-core:0.9.2' // include jphp with runtime and compiler
        compile 'org.develnext.jphp:jphp-zend-ext:0.9.2' // include jphp with runtime and compiler
    }

    return
}

//gradle脚本自身需要使用的资源
buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven {
            url 'http://maven.aliyun.com/nexus/content/repositories/snapshots'
        }
        maven {
            url "http://dl.bintray.com/kotlin/kotlin"
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            url 'http://oss.jfrog.org/artifactory/oss-snapshot-local'
        }

    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-allopen:$kotlin_version"

        classpath "org.jetbrains.dokka:dokka-gradle-plugin:${dokka_version}"

        classpath "org.akhikhl.gretty:gretty:${gretty_version}"

        classpath "gradle.plugin.aspectj:gradle-aspectj:0.1.6"
    }
}

project(':') {
    group 'net.jkcode'
    version '0.9.2'

    apply plugin: 'java'
    apply plugin: 'kotlin'
    apply plugin: 'maven'

    sourceCompatibility = jvm_version
    compileKotlin {
        kotlinOptions {
            freeCompilerArgs = ["-Xjvm-default=enable"]
            jvmTarget = jvm_version
        }
    }
    compileTestKotlin {
        kotlinOptions {
            freeCompilerArgs = ["-Xjvm-default=enable"]
            jvmTarget = jvm_version
        }
    }

    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url 'http://maven.aliyun.com/nexus/content/repositories/snapshots'
        }
        maven { // jphp
            url "https://jitpack.io"
        }
        maven {
            url "http://dl.bintray.com/kotlin/kotlin"
        }
        maven {
            url "https://repository.apache.org/content/repositories/releases"
        }
        maven {
            url 'https://dl.bintray.com/kotlin/kotlin-eap'
        }
    }

    sourceSets {
        main {
            java {
                srcDirs = ['src/main/java', 'src/main/kotlin']
            }
            resources {
                srcDirs = ['src/main/resources']
            }
        }
        test {
            java {
                srcDirs = ['src/test/java', 'src/test/kotlin']
            }
            resources {
                srcDirs = ['src/test/resources']
            }
        }
    }

    dependencies {
        // kotlin
        compile 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
        compile 'org.jetbrains.kotlin:kotlin-reflect'
        //compile "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    
        // 依赖
        compile "net.jkcode:jkutil:$jkutil_version"
        compile "net.jkcode:jkguard:$jkguard_version"

        // jphp
        compile 'org.develnext.jphp:jphp-core:0.9.2' // include jphp with runtime and compiler
        compile 'org.develnext.jphp:jphp-zend-ext:0.9.2' // include jphp with runtime and compiler

        // test
        testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
        testCompile 'junit:junit:4.11'
    }

    // kotlin文档生成
    apply plugin: 'org.jetbrains.dokka'

    dokka {
        outputFormat = 'html'
        outputDirectory = "$buildDir/javadoc"
    }

    task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
        outputFormat = "javadoc"
        outputDirectory = "$buildDir/dokkaJavadoc"
    }

    // 发布到maven中央库
    if(!project.name.endsWith('example') && !project.name.endsWith('demo') && !project.name.endsWith('benchmark')){
        apply plugin: 'maven-publish'
        apply plugin: 'signing'

        task sourcesJar(type: Jar) {
            //from sourceSets.main.allJava // 只java, 不包含kotlin与配置文件
            from sourceSets.main.allSource // 所有
            classifier = 'sources'
        }

        task javadocJar(type: Jar) {
            //from javadoc
            from dokkaJavadoc
            classifier = 'javadoc'
        }

        publishing {
            // 定义发布什么
            publications {
                mavenJava(MavenPublication) {
                    // groupId = project.group
                    // artifactId = project.name
                    // version = project.version
                    // groupId,artifactId,version，如果不定义，则会按照以上默认值执行
                    from components.java
                    artifact sourcesJar
                    artifact javadocJar
                    
                    pom {
                        // 构件名称
                        // 区别于artifactId，可以理解为artifactName
                        name = 'jphp-java-ext'
                        // 构件描述
                        description = "jphp-java-ext is a jphp extension for manipulating java object."
                        // 构件主页
                        url = 'https://github.com/shigebeyond/jphp-java-ext'

                        // 许可证名称和地址
                        licenses {
                            license {
                                name = 'The Apache License, Version 2.0'
                                url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            }
                        }
                        // 开发者信息
                        developers {
                            developer {
                                name = 'shijianhang'
                                email = '772910474@qq.com'
                            }
                        }
                        // 版本控制仓库地址
                        scm {
                            url = 'https://github.com/shigebeyond/jphp-java-ext'
                            connection = 'scm:git:https://github.com/shigebeyond/jphp-java-ext.git'
                            developerConnection = 'scm:git:https://github.com/shigebeyond/jphp-java-ext.git'
                        }
                    }
                }
            }
            // 定义发布到哪里
            repositories {
                maven {
                    url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
                    credentials {
                        // issues.sonatype.org账号, 配置在 ~/.gradle/gradle.properties
                        username sonatypeUsername
                        password sonatypePassword
                    }
                }
            }
        }

        signing {
            sign publishing.publications.mavenJava
        }

    }


}

	
